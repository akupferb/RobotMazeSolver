#pragma once
//#include "Target/Targets.h"
#include "RobotModel/MobileRobot.h"
#include <iostream>
#include <vector>
#include <string>

class Maze {
private:
	int n;
	int m;
	friend class MobileRobot;

public:
	Maze();
	char maze_arr[31][46] = 
	{{'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
	{'#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#'},
	{'#',' ',' ','#','#','#','#','#','#','#','#','#','#',' ',' ','#','#','#','#','#','#','#','#','#','#','#','#','#',' ',' ','#','#','#','#','#','#','#',' ',' ','#','#','#','#',' ',' ','#'},
	{'#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ','#'},
	{'#',' ',' ','#','#','#','#','#','#','#',' ',' ','#','#','#','#','#','#','#','#','#','#','#','#','#',' ',' ','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
	{'#',' ',' ','#',' ',' ',' ',' ',' ','#',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#'},
	{'#',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ','#','#','#','#','#','#','#',' ',' ','#',' ',' ','#','#','#','#','#','#','#','#','#','#','#','#','#',' ',' ','#'},
	{'#',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ',' ',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ','#'},
	{'#',' ',' ','#',' ',' ','#','#','#','#',' ',' ','#',' ',' ','#','#','#','#','#','#','#','#','#','#',' ',' ','#',' ',' ','#','#','#','#',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ','#'},
	{'#',' ',' ','#',' ',' ',' ',' ',' ','#',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ','#',' ',' ','#'},
	{'#',' ',' ','#','#','#','#',' ',' ','#',' ',' ','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#',' ',' ','#','#','#','#','#','#','#','#','#','#','#','#','#',' ',' ','#'},
	{'#',' ',' ',' ',' ',' ','#',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#'},
	{'#','#','#','#',' ',' ','#',' ',' ','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#',' ',' ','#','#','#','#','#','#','#','#','#','#',' ',' ','#'},
	{'#',' ',' ','#',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ','#',' ',' ','#',' ',' ','#'},
	{'#',' ',' ','#',' ',' ','#','#','#','#',' ',' ','#','#','#','#','#','#','#','#','#','#','#','#','#',' ',' ','#',' ',' ','#','#','#','#',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ','#'},
	{'#',' ',' ','#',' ',' ','#',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ','#',' ',' ','#'},
	{'#',' ',' ','#',' ',' ','#',' ',' ','#','#','#','#','#','#','#',' ',' ','#','#','#','#',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ','#','#','#','#','#','#','#','#','#','#',' ',' ','#'},
	{'#',' ',' ',' ',' ',' ','#',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#'},
	{'#','#','#','#',' ',' ','#',' ',' ','#',' ',' ','#','#','#','#','#','#','#','#','#','#',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ','#','#','#','#','#','#','#','#','#','#','#','#','#'},
	{'#',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#'},
	{'#',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ','#','#','#','#','#','#','#',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ','#','#','#','#','#','#','#',' ',' ','#'},
	{'#',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ',' ',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ',' ',' ',' ','#',' ',' ','#'},
	{'#',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ','#','#','#','#','#','#','#',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ','#'},
	{'#',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ','#'},
	{'#',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ','#','#','#','#','#','#','#','#','#','#','#','#','#',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ','#','#','#','#',' ',' ','#',' ',' ','#'},
	{'#',' ',' ',' ',' ',' ','#',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ','#',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ','#'},
	{'#',' ',' ','#','#','#','#',' ',' ','#',' ',' ','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#',' ',' ','#',' ',' ','#','#','#','#','#','#','#',' ',' ','#',' ',' ','#'},
	{'#',' ',' ','#',' ',' ',' ',' ',' ','#',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ','#',' ',' ','#'},
	{'#',' ',' ','#','#','#','#',' ',' ','#',' ',' ','#','#','#','#','#','#','#',' ',' ','#',' ',' ','#','#','#','#','#','#','#','#','#','#',' ',' ','#','#','#','#','#','#','#',' ',' ','#'},
	{'#',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#'},
	{'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#',' ',' ','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'}};

	void displayMaze();
	bool isObstacle(int, int, MobileRobot*);
	bool isGoal(MobileRobot*, std::vector<int>);
	void changeSpace(std::vector<int>, char);
	void rewrite(MobileRobot*, MobileRobot*, std::vector<int>, std::vector<int>);
	std::vector<int> isInputValid(int, int);
	std::vector<int> numericInputs(); 
};